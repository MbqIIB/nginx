
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

load_module modules/ngx_http_lua_module.so ;

worker_rlimit_nofile 32768 ;

events {
    use epoll ;
    worker_connections  16384;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format combined_plus '$remote_addr - $remote_user [$time_local]'
                             ' "$request" $status $body_bytes_sent "$http_referer"'
                             ' "$http_user_agent" $request_time $upstream_cache_status'
                             ' [$upstream_response_time]';

    access_log /var/log/nginx/access.log combined_plus;


    lua_need_request_body on ;

    init_worker_by_lua_block {

			       socket  = require("socket")
			       tcp = assert(socket.tcp())
			       assert(tcp:connect("127.0.0.1", 11515))

			     }

    sendfile    on;
    #tcp_nopush on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

    client_max_body_size 128m ;

    index   index.html index.htm;

    upstream remoteserver {
        server 1.2.3.4:80 ; 
    }


    server {

        listen 127.0.0.1:8080 default ;

        server_name  logging.proxy ; 

	access_log /dev/null ;

        location / {

    	    set $req_headers  "";
    	    set $req_body     "";
    	    set $resp_headers "";
    	    set $resp_body    "";

	    rewrite_by_lua_block   {

					   local method = ngx.var.request_method
	                                   ngx.req.read_body()
	                                   ngx.var.req_body = ngx.req.get_body_data()

				   }

	    body_filter_by_lua_block     {

					   local resp_body = string.sub(ngx.arg[1], 1, -1)
	                                   ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
	                                   if ngx.arg[2] then
	                                       ngx.var.resp_body = ngx.ctx.buffered
	                                   end

	                                   local req_h = ""
	                                   for k,v in pairs (ngx.req.get_headers()) do
	                                     req_h = req_h .. k .. ": " .. v .. "\n"
	                                   end
	                                   ngx.var.req_headers = req_h

	                                   local resp_h = ""
	                                   for k,v in pairs (ngx.resp.get_headers()) do
	                                     resp_h = resp_h .. k .. ": " .. v .. "\n"
	                                   end
	                                   ngx.var.resp_headers = resp_h

					 }

            log_by_lua_block   {

                                           local out = "===== " .. tostring(ngx.var.time_local) .. " ====\n"
                                           out = out .. tostring(ngx.var.request) .. "\n==\n" ..  tostring(ngx.var.req_headers) .. "\n==\n" ..  tostring(ngx.var.req_body) .. "\n==\n"
                                           out = out .. "HTTP " .. tostring(ngx.var.status) .. "\n==\n" .. tostring(ngx.var.resp_headers) .. "\n==\n" ..  tostring(ngx.var.resp_body)
                                           out = out .. "\n=====================================\n=\n=\n=\n"
                                           assert(tcp:send(out))

                               }



            proxy_pass http://remoteserver;
        }
     }

}
