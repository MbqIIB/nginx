
init_by_lua_block {

ffi = require("ffi")
libqrencode = ffi.load("libqrencode.so.3")

BLACK="⬛️"
WHITE="⬜️"

ffi.cdef[[

  typedef enum {
      QR_ECLEVEL_L = 0,
      QR_ECLEVEL_M,
      QR_ECLEVEL_Q,
      QR_ECLEVEL_H
  } QRecLevel;

  typedef struct {
      int version;
      int width;
      unsigned char *data;
  } QRcode;

  QRcode *QRcode_encodeString8bit(const char *string, int version, QRecLevel level);

]]

}

server {
    listen 80; 

    access_log /dev/null ;

    location / {
      charset utf8;
      default_type  text/html;
      set $string "$scheme://$http_host$request_uri";
      content_by_lua_block  {

local qr = ffi.new("QRcode[?]",0)
local STRING=ngx.var.string

qr = libqrencode.QRcode_encodeString8bit(STRING,0,0)
local width = qr.width
local data = ffi.string(qr.data, width*width)
qr = nil

out = '<html><body><pre style="font-size: 14px; letter-spacing: 0; line-height: 14px; text-align: center;">\n\n'

local i = 0
for cur = 1, #data do
    local c = data:byte(cur, cur)
    char = (bit.band(c,1) == 0)  and WHITE or BLACK
    out = out .. char
    i = i + 1

    if i == width then
      out = out .. "\n"
      i = 0
    end
end

out = out .. "\n\n</pre></body></html>"

ngx.say(out)


        }

    }
}
